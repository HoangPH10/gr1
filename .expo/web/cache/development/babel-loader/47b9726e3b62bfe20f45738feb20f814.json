{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useState, useEffect } from 'react';\nimport AppLoading from 'expo-app-loading';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AllTexts from \"./screens/AllTexts\";\nimport AddText from \"./screens/AddText\";\nimport IconButton from \"./components/UI/IconButton\";\nimport { Colors } from \"./constants/color\";\nimport { init } from \"./utils/database\";\nimport TextDetails from \"./screens/TextDetails\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dbInitialized = _useState2[0],\n      setdbInitialized = _useState2[1];\n\n  useEffect(function () {\n    init().then(function () {\n      setdbInitialized(true);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }, []);\n\n  if (!dbInitialized) {\n    return _jsx(AppLoading, {});\n  }\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      style: \"dark\"\n    }), _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        screenOptions: {\n          headerStyle: {\n            backgroundColor: Colors.primary500\n          },\n          headerTintColor: Colors.gray700,\n          contentStyle: {\n            backgroundColor: Colors.gray700\n          }\n        },\n        children: [_jsx(Stack.Screen, {\n          name: \"AllTexts\",\n          component: AllTexts,\n          options: function options(_ref) {\n            var navigation = _ref.navigation;\n            return {\n              title: 'All Texts',\n              headerRight: function headerRight(_ref2) {\n                var tintColor = _ref2.tintColor;\n                return _jsx(IconButton, {\n                  icon: \"add\",\n                  size: 24,\n                  color: tintColor,\n                  onPress: function onPress() {\n                    return navigation.navigate('AddText');\n                  }\n                });\n              }\n            };\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"AddText\",\n          component: AddText,\n          options: {\n            title: 'Add a new Text'\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"TextDetails\",\n          component: TextDetails,\n          options: {\n            title: 'Loading Place...'\n          }\n        })]\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["D:/Ha noi university of science and technology/ICT/Term 8/GR1/reports/file_report5/my-app/App.js"],"names":["StatusBar","useState","useEffect","AppLoading","NavigationContainer","createNativeStackNavigator","AllTexts","AddText","IconButton","Colors","init","TextDetails","Stack","App","dbInitialized","setdbInitialized","then","catch","err","console","log","headerStyle","backgroundColor","primary500","headerTintColor","gray700","contentStyle","navigation","title","headerRight","tintColor","navigate","styles","StyleSheet","create","container","flex","alignItems","justifyContent"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;;;;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAmC,OAAnC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AACA,OAAOC,QAAP;AACA,OAAOC,OAAP;AACA,OAAOC,UAAP;AACA,SAASC,MAAT;AACA,SAASC,IAAT;AACA,OAAOC,WAAP;;;;AAEA,IAAMC,KAAK,GAAGP,0BAA0B,EAAxC;AAGA,eAAe,SAASQ,GAAT,GAAe;AAC5B,kBAA0CZ,QAAQ,CAAC,KAAD,CAAlD;AAAA;AAAA,MAAOa,aAAP;AAAA,MAAsBC,gBAAtB;;AAEAb,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,IAAI,GACHM,IADD,CACM,YAAM;AACVD,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KAHD,EAGGE,KAHH,CAGS,UAAAC,GAAG,EAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KALD;AAMD,GAPQ,EAON,EAPM,CAAT;;AASA,MAAI,CAACJ,aAAL,EAAmB;AACjB,WAAO,KAAC,UAAD,KAAP;AACD;;AAID,SACE;AAAA,eACE,KAAC,SAAD;AAAW,MAAA,KAAK,EAAC;AAAjB,MADF,EAEE,KAAC,mBAAD;AAAA,gBACE,MAAC,KAAD,CAAO,SAAP;AAAiB,QAAA,aAAa,EAAE;AAC9BO,UAAAA,WAAW,EAAE;AAACC,YAAAA,eAAe,EAAEb,MAAM,CAACc;AAAzB,WADiB;AAE9BC,UAAAA,eAAe,EAAEf,MAAM,CAACgB,OAFM;AAG9BC,UAAAA,YAAY,EAAE;AAACJ,YAAAA,eAAe,EAAEb,MAAM,CAACgB;AAAzB;AAHgB,SAAhC;AAAA,mBAKE,KAAC,KAAD,CAAO,MAAP;AACE,UAAA,IAAI,EAAE,UADR;AAEE,UAAA,SAAS,EAAEnB,QAFb;AAGE,UAAA,OAAO,EAAE;AAAA,gBAAEqB,UAAF,QAAEA,UAAF;AAAA,mBACP;AACEC,cAAAA,KAAK,EAAE,WADT;AAEEC,cAAAA,WAAW,EAAE;AAAA,oBAAEC,SAAF,SAAEA,SAAF;AAAA,uBAAkB,KAAC,UAAD;AAAY,kBAAA,IAAI,EAAC,KAAjB;AAAuB,kBAAA,IAAI,EAAE,EAA7B;AAAiC,kBAAA,KAAK,EAAEA,SAAxC;AAAmD,kBAAA,OAAO,EAAI;AAAA,2BAAMH,UAAU,CAACI,QAAX,CAAoB,SAApB,CAAN;AAAA;AAA9D,kBAAlB;AAAA;AAFf,aADO;AAAA;AAHX,UALF,EAeE,KAAC,KAAD,CAAO,MAAP;AACE,UAAA,IAAI,EAAC,SADP;AAEE,UAAA,SAAS,EAAExB,OAFb;AAGE,UAAA,OAAO,EAAE;AACPqB,YAAAA,KAAK,EAAE;AADA;AAHX,UAfF,EAuBE,KAAC,KAAD,CAAO,MAAP;AACE,UAAA,IAAI,EAAC,aADP;AAEE,UAAA,SAAS,EAAEjB,WAFb;AAGE,UAAA,OAAO,EAAE;AACPiB,YAAAA,KAAK,EAAE;AADA;AAHX,UAvBF;AAAA;AADF,MAFF;AAAA,IADF;AAsCD;AAED,IAAMI,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETd,IAAAA,eAAe,EAAE,MAFR;AAGTe,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport  {useState, useEffect} from 'react';\nimport AppLoading from 'expo-app-loading';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AllTexts from './screens/AllTexts';\nimport AddText from './screens/AddText';\nimport IconButton from './components/UI/IconButton';\nimport { Colors } from './constants/color';\nimport { init } from './utils/database';\nimport TextDetails from './screens/TextDetails';\n\nconst Stack = createNativeStackNavigator();\n\n\nexport default function App() {\n  const [dbInitialized, setdbInitialized] = useState(false)\n\n  useEffect(() => {\n    init()\n    .then(() => {\n      setdbInitialized(true);\n    }).catch(err => {\n      console.log(err)\n    });\n  }, [])\n\n  if (!dbInitialized){\n    return <AppLoading />\n  }\n  \n\n\n  return (\n    <>\n      <StatusBar style='dark' />\n      <NavigationContainer>\n        <Stack.Navigator screenOptions={{\n          headerStyle: {backgroundColor: Colors.primary500},\n          headerTintColor: Colors.gray700,\n          contentStyle: {backgroundColor: Colors.gray700}\n        }} >\n          <Stack.Screen \n            name= 'AllTexts' \n            component={AllTexts} \n            options={({navigation}) => (\n              {\n                title: 'All Texts' ,\n                headerRight: ({tintColor}) =>  <IconButton icon=\"add\" size={24} color={tintColor} onPress = {() => navigation.navigate('AddText')} />\n              }\n            )}\n          />\n          <Stack.Screen \n            name='AddText' \n            component={AddText} \n            options={{\n              title: 'Add a new Text'\n            }}\n          />\n         \n          <Stack.Screen\n            name='TextDetails'\n            component={TextDetails}\n            options={{\n              title: 'Loading Place...',\n            }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\n\n\n"]},"metadata":{},"sourceType":"module"}