{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Colors } from \"../constants/color\";\nimport { fetchTextDetail } from \"../utils/database\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function TextDetails(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      fetchText = _useState2[0],\n      setfetchText = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      predictedText = _useState4[0],\n      setPredictedText = _useState4[1];\n\n  var getPredict = function _callee() {\n    var headers, response;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            headers = {\n              headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              }\n            };\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.post('/predict', {\n              base64: 'data:image/jpeg;base64,' + fetchText.base64\n            }, headers));\n\n          case 3:\n            response = _context.sent;\n            console.log(response);\n            setPredictedText(response);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var selectedTextId = route.params.textId;\n\n  var getTextDetail = function _callee2() {\n    var text;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetchTextDetail(selectedTextId));\n\n          case 2:\n            text = _context2.sent;\n            setfetchText(text);\n            navigation.setOptions({\n              title: text.title\n            });\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getTextDetail();\n  }, [selectedTextId]);\n  useEffect(function () {\n    if (fetchText && fetchText.base64) {\n      try {\n        getPredict();\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  }, [fetchText]);\n\n  if (!fetchText) {\n    return _jsx(View, {\n      style: styles.fallback,\n      children: _jsx(Text, {\n        children: \"Loading place data...\"\n      })\n    });\n  }\n\n  return _jsxs(ScrollView, {\n    children: [_jsx(Image, {\n      source: {\n        uri: fetchText.imageUri\n      },\n      style: styles.image\n    }), _jsx(View, {\n      style: styles.locationContainer,\n      children: _jsx(View, {\n        style: styles.addressContainer,\n        children: _jsxs(Text, {\n          style: styles.address,\n          children: [\"Predicted : \", 'Hai Minh, Hai Hau, Nam Dinh']\n        })\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  fallback: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  screen: {\n    alignItems: 'center'\n  },\n  image: {\n    height: '35%',\n    minHeight: 300,\n    width: '100%'\n  },\n  locationContainer: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  addressContainer: {\n    padding: 20\n  },\n  address: {\n    color: Colors.primary500,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 16\n  }\n});","map":{"version":3,"sources":["D:/Ha noi university of science and technology/ICT/Term 8/GR1/reports/file_report5/my-app/screens/TextDetails.js"],"names":["axios","React","useEffect","useState","Colors","fetchTextDetail","TextDetails","route","navigation","fetchText","setfetchText","predictedText","setPredictedText","getPredict","headers","post","base64","response","console","log","selectedTextId","params","textId","getTextDetail","text","setOptions","title","err","styles","fallback","uri","imageUri","image","locationContainer","addressContainer","address","StyleSheet","create","flex","justifyContent","alignItems","screen","height","minHeight","width","padding","color","primary500","textAlign","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport React, {useEffect, useState} from 'react'\r\nimport { ScrollView, View, Image, Text, StyleSheet } from 'react-native'\r\nimport { Colors } from '../constants/color'\r\nimport { fetchTextDetail } from '../utils/database'\r\n\r\nexport default function TextDetails({route, navigation}) {\r\n    const [fetchText, setfetchText] = useState()\r\n    const [predictedText, setPredictedText] = useState('');\r\n\r\n\r\n    const getPredict = async() => {\r\n        let headers = {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n    \r\n        }\r\n\r\n\r\n        const response =  await axios.post('/predict', {\r\n            base64 : 'data:image/jpeg;base64,' + fetchText.base64\r\n        }, headers)\r\n        console.log(response)\r\n        setPredictedText(response)\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n        \r\n    \r\n    \r\n\r\n    const selectedTextId = route.params.textId;\r\n\r\n    const getTextDetail = async() => {\r\n        const text = await fetchTextDetail(selectedTextId)\r\n        setfetchText(text)\r\n        navigation.setOptions({\r\n            title: text.title,\r\n\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getTextDetail();\r\n    }, [selectedTextId])\r\n\r\n    useEffect(() => {\r\n        if (fetchText && fetchText.base64){\r\n            try{\r\n               getPredict();\r\n            }catch(err){\r\n                console.log(err)\r\n            }\r\n        }\r\n    }, [fetchText])\r\n    \r\n\r\n    if (!fetchText){\r\n        return <View style={styles.fallback}>\r\n            <Text>Loading place data...</Text>\r\n        </View>\r\n    }\r\n\r\n\r\n  return (\r\n      <ScrollView >\r\n          <Image source={{uri: fetchText.imageUri }} style={styles.image}/>\r\n          <View style={styles.locationContainer}>\r\n            <View style={styles.addressContainer}>\r\n                <Text style={styles.address}>Predicted : { 'Hai Minh, Hai Hau, Nam Dinh'}</Text>\r\n            </View>\r\n          </View>\r\n      </ScrollView>\r\n  )\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    fallback:{\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    screen:{\r\n        alignItems: 'center'\r\n    },\r\n    image:{\r\n        height: '35%',\r\n        minHeight: 300,\r\n        width: '100%',\r\n    },\r\n    locationContainer:{\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    addressContainer: {\r\n        padding: 20\r\n    },\r\n    address :{\r\n        color: Colors.primary500,\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        fontSize: 16,\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}