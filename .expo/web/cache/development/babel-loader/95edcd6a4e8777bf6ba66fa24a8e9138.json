{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport * as SQLite from 'expo-sqlite';\nimport { TextModel } from \"../models/text\";\nimport base64 from 'react-native-base64';\nvar database = SQLite.openDatabase('texts.db');\nexport var init = function init() {\n  var promise = new Promise(function (resolve, reject) {\n    database.transaction(function (tx) {\n      tx.executeSql(\"create table if not exists Texts (\\n                id integer primary key not null,\\n                title text not null,\\n                imageUri text not null,\\n                base64 text not null\\n            )\", [], function () {\n        resolve();\n      }, function (_, error) {\n        reject(error);\n      });\n    });\n  });\n  return promise;\n};\nexport var insertText = function insertText(text) {\n  var promise = new Promise(function (resolve, reject) {\n    database.transaction(function (tx) {\n      tx.executeSql(\"Insert into texts (title, imageUri,base64) VALUES(?,?,?)\", [text.title, text.imageUri, base64.decode(text.base64)], function (_, result) {\n        resolve(result);\n      }, function (_, error) {\n        reject(error);\n      });\n    });\n  });\n  return promise;\n};\nexport var fetchTexts = function fetchTexts() {\n  var promise = new Promise(function (resolve, reject) {\n    database.transaction(function (tx) {\n      tx.executeSql('select * from texts', [], function (_, result) {\n        var texts = [];\n\n        for (var _iterator = _createForOfIteratorHelperLoose(result.rows._array), _step; !(_step = _iterator()).done;) {\n          var dp = _step.value;\n          texts.push(new TextModel(dp.title, {\n            uri: dp.imageUri,\n            base64: base64.encode(dp.base64)\n          }, dp.id));\n        }\n\n        resolve(texts);\n      }, function (_, error) {\n        return reject(error);\n      });\n    });\n  });\n  return promise;\n};\nexport var fetchTextDetail = function fetchTextDetail(id) {\n  var promise = new Promise(function (resolve, reject) {\n    database.transaction(function (tx) {\n      tx.executeSql(\"Select * from texts where id = ?\", [id], function (_, result) {\n        var selectedText = result.rows._array[0];\n        var text = new TextModel(selectedText.title, {\n          uri: selectedText.imageUri,\n          base64: selectedText.base64\n        }, selectedText.id);\n        resolve(text);\n      }, function (_, error) {\n        reject(error);\n      });\n    });\n  });\n  return promise;\n};","map":{"version":3,"sources":["D:/Ha noi university of science and technology/ICT/Term 8/GR1/reports/file_report5/my-app/utils/database.js"],"names":["SQLite","TextModel","base64","database","openDatabase","init","promise","Promise","resolve","reject","transaction","tx","executeSql","_","error","insertText","text","title","imageUri","decode","result","fetchTexts","texts","rows","_array","dp","push","uri","encode","id","fetchTextDetail","selectedText"],"mappings":"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","sourcesContent":["import * as SQLite from 'expo-sqlite'\r\nimport {TextModel} from '../models/text'\r\nimport base64 from 'react-native-base64'\r\nconst database = SQLite.openDatabase('texts.db');\r\n\r\nexport const init = () => {\r\n    const promise = new Promise((resolve, reject) => {\r\n        database.transaction((tx) => {\r\n            // tx.executeSql(`DROP TABLE if exists Texts; `,\r\n\r\n            tx.executeSql(`create table if not exists Texts (\r\n                id integer primary key not null,\r\n                title text not null,\r\n                imageUri text not null,\r\n                base64 text not null\r\n            )`,\r\n            [], \r\n            () => {\r\n                resolve();\r\n            },\r\n            (_, error) => {\r\n                reject(error);\r\n            }\r\n            );\r\n        });\r\n    })\r\n    return promise;\r\n}\r\n\r\nexport const insertText =  (text) => {\r\n    const promise = new Promise((resolve,reject)  =>{ \r\n        database.transaction((tx) => {\r\n            tx.executeSql(`Insert into texts (title, imageUri,base64) VALUES(?,?,?)`,\r\n            [\r\n                text.title, \r\n                text.imageUri,\r\n                base64.decode(text.base64) \r\n            ],\r\n            (_, result) => {\r\n                resolve(result)\r\n            },\r\n            (_,error) => {\r\n                reject(error)\r\n            }\r\n            )\r\n        })\r\n    } );\r\n    return promise;\r\n}\r\n\r\nexport const fetchTexts = () => {\r\n    const promise = new Promise((resolve, reject) => {\r\n        database.transaction(tx =>{\r\n            tx.executeSql('select * from texts',[],\r\n            (_, result) => {\r\n                const texts = [];\r\n                for (const dp of result.rows._array){\r\n                    texts.push(new TextModel(\r\n                        dp.title, \r\n                        {uri: dp.imageUri, base64: base64.encode(dp.base64)}, \r\n                        dp.id))\r\n                }\r\n                resolve(texts)},\r\n            (_, error) => reject(error))\r\n        })\r\n    })\r\n    return promise\r\n}\r\n\r\n\r\nexport const fetchTextDetail = (id) => {\r\n    const promise = new Promise((resolve, reject) => {\r\n        database.transaction(tx => {\r\n            tx.executeSql(`Select * from texts where id = ?`,[id],\r\n            (_, result) => {\r\n\r\n                const selectedText = result.rows._array[0];\r\n                const text = new TextModel(\r\n                    selectedText.title, \r\n                    {uri: selectedText.imageUri, base64: selectedText.base64}, \r\n                    selectedText.id)\r\n                resolve(text)\r\n            },\r\n            (_, error) => {reject(error)})\r\n        })\r\n    })\r\n\r\n    return promise;\r\n}"]},"metadata":{},"sourceType":"module"}